# Mithat Can Timurcan 2581064

.pos 0x0
	irmovq stack, %rsp
	irmovq head, %rdi
	call selection_sort_it
	halt

.pos 0x200
head:
	.quad 17
    	.quad node1
node1:
	.quad 24
    	.quad node2
node2:
	.quad 6
    	.quad node3
node3:
	.quad 11
    	.quad node4
node4:
	.quad 4
    	.quad node5
node5:
    	.quad 5
    	.quad node6
node6:
    	.quad 3
    	.quad node7
node7:
	.quad 40
    	.quad node8
node8:
	.quad 19
    	.quad node9
node9:
	.quad 52
    	.quad node10
node10:
    	.quad 8
    	.quad 0
	   
selection_sort_it:
	andq %rdi, %rdi		# check if head is NULL
	je base_case
	mrmovq 8(%rdi), %rcx	# check if head->next is NULL
	andq %rcx, %rcx
	je base_case
	xorq %rsi, %rsi 	# sorted = NULL

loop:
	rrmovq %rdi, %rax	# max = head
	xorq %rbx, %rbx         # prevMax = NULL
   	rrmovq %rdi, %rcx       # curr = head
   	xorq %rdx, %rdx         # prev = NULL

find_max:
   	mrmovq (%rcx), %r8      # r8 = curr->data
   	mrmovq (%rax), %r9	# r9 = max->data
	subq %r9, %r8        	# (curr->data - max->data) > 0
   	jg update_max          	# if curr->data > max->data, update max
	jmp move_to_next_node   # then we move to the next node

update_max:
   	rrmovq %rcx, %rax       # max = curr
   	rrmovq %rdx, %rbx       # prevMax = prev

move_to_next_node:
	rrmovq %rcx, %rdx	# prev = curr 
	mrmovq 8(%rcx), %rcx    # curr = curr->next
    	andq %rcx, %rcx         # we check if curr == NULL
    	je remove_max           # if it's NULL, we end the loop
	jmp find_max	

remove_max:
    	rrmovq %rdi, %r8        # Load head into r8
    	rrmovq %rax, %r9	# Load max into r9
	subq %r8, %r9          	# Check if max == head
    	jne remove_inner        # If not equal, remove max
    	mrmovq 8(%rdi), %rdi    # head = head->next
    	jmp insert_sorted

remove_inner:
    	mrmovq 8(%rax), %r8     # r8 = max->next
    	rmmovq %r8, 8(%rbx)     # prevMax->next = max->next

insert_sorted:
    	rmmovq %rsi, 8(%rax)    # max->next = sorted
    	rrmovq %rax, %rsi       # sorted = max
    	andq %rdi, %rdi         # Check if head == NULL
    	je done
	jmp loop

base_case:
	rrmovq %rdi, %rax
	ret

done:
	rrmovq %rsi, %rax
	ret
	
.pos 0x800
stack:
