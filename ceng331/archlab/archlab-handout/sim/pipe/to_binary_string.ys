#/* $begin to_binary_string-ys */
##################################################################
# to_binary_string.ys - Convert an arr block of len integers to 
# binary strings and store in buff
# Return the sum of integers contained in arr.
# Include your name and ID here.
# Name: Mithat Can Timurcan
# ID: 2581064
# Describe how and why you modified the baseline code.
# First of all, the shift right operation defined was doing too much
# operations. It was adding r8 to itself up until the pow value is 
# reached. I realized that we don't actually need the shift right
# operation since it only controlls how many times the loop is going
# to be executed. In this case, since our pow value is constant, we
# know that the loop is going to be executed 8 times. Therefore, I 
# wrote the looping code 8 times and gave pow constant values (128, 64, ...).
# This loop unrolling approach enabled me to reduce my CPE to approximately 100.
#
# In order to further reduce the CPE, I also deleted the check where
# it checks the pow <= 0, since I already defined how many times the loop
# is going to be executed, we don't need this check anymore. I also added cmpq
# instruction to the pipe-full.hcl and replaced rrmovq & subq with cmpq to 
# replace 2 instructions with one. These modifications reduced my CPE to approximately
# 77.5.
#
# Lastly, I double-checked if there's anything we can do to reduce our CPE,
# and found out that there were some irmovq instructions that do the same assignment
# over and over. To avoid that, I stored some constant values that I need in
# separate registers. Therefore I only needed to use that register to increment temp or
# assignment to *temp. This approach reduced my CPE value to approximately 62.5.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = arr, %rsi = buff, %rdx = len
to_binary_string:
##################################################################
# You can modify this portion
    # Loop header
    xorq %rax, %rax
    andq %rdx,%rdx
    jle Done
Loop:    
    mrmovq (%rdi), %r9      # read val from arr...
    irmovq $8, %r8
    addq %r8, %rdi          # arr++
    addq %r9, %rax          # sum += val
    rrmovq %rsi, %r10       # temp = buff
    irmovq $128, %rcx       # pow = 128
    irmovq $1, %r13         # constant 1 for incrementing temp
    irmovq $49, %r11        # constant '1' for assigning
    irmovq $48, %r12        # constant '0' for assigning
inner_loop_1:
    cmpq %r9, %rcx
    jg otw_1                # check if val >= pow
    subq %rcx, %r9          # val -= pow;         
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_1
otw_1:   
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_1:  
    addq %r13, %r10         # temp++
    irmovq $64, %rcx
inner_loop_2:
    cmpq %r9, %rcx
    jg otw_2                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_2
otw_2:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_2:
    addq %r13, %r10         # temp++
    irmovq $32, %rcx
inner_loop_3:
    cmpq %r9, %rcx
    jg otw_3                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_3
otw_3:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_3:
    addq %r13, %r10         # temp++
    irmovq $16, %rcx
inner_loop_4:
    cmpq %r9, %rcx
    jg otw_4                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_4
otw_4:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_4:
    addq %r13, %r10         # temp++
    irmovq $8, %rcx
inner_loop_5:
    cmpq %r9, %rcx
    jg otw_5                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_5
otw_5:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_5:
    addq %r13, %r10         # temp++
    irmovq $4, %rcx
inner_loop_6:
    cmpq %r9, %rcx
    jg otw_6                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_6
otw_6:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_6:
    addq %r13, %r10         # temp++
    irmovq $2, %rcx
inner_loop_7:
    cmpq %r9, %rcx
    jg otw_7                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_7
otw_7:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_7:
    addq %r13, %r10         # temp++
    irmovq $1, %rcx
inner_loop_8:
    cmpq %r9, %rcx
    jg otw_8                # check if val >= pow
    subq %rcx, %r9          # val -= pow;
    rmmovq %r11, (%r10)     # *temp = '1'
    jmp inner_updates_8
otw_8:
    rmmovq %r12, (%r10)     # *temp = '0'
inner_updates_8:
    addq %r13, %r10         # temp++
updates:  
    subq %r13, %rdx
    addq %r8, %rsi    	    # buff++
    andq %rdx,%rdx    	    # len > 0?
    jg Loop                 # if so, goto Loop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end to_binary_string-ys */
